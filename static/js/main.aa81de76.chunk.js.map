{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","puesto","cumpleaños","id","className","alt","src","CardList","robots","map","user","i","key","Cumpleaños","Puesto","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","distpatch","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa81de76.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,puesto,cumpleaños,id}) => {\r\n    return(\r\n        <div className='tc bg-orange dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n                <p><b>Cargo: </b>{puesto}</p>\r\n                <p><b>Cumpleaños:</b> {cumpleaños}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <>\r\n            {\r\n              robots.map((user,i) => {\r\n                 return (\r\n                   <Card \r\n                      key={i} \r\n                      id={robots[i].id} \r\n                      name={robots[i].name} \r\n                      email={robots[i].email}\r\n                      cumpleaños={robots[i].Cumpleaños}\r\n                      puesto={robots[i].Puesto}\r\n                   />\r\n                 );\r\n             })\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--dark-red bg-light-yellow'\r\n                type='search' \r\n                placeholder='Search Robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow:'scroll', border:'3px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops. That is not good!!!!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots:state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: ()=> dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n /*constructor(){\r\n        super()\r\n        this.state={\r\n            robots: []\r\n        //    searchField:''\r\n        }\r\n    }*/\r\n\r\n    componentDidMount(){\r\n        /*fetch('https://raw.githubusercontent.com/marmola90/JsonDBDemo/master/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots:users}));*/\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    /*onSearchChange=(event)=>{\r\n        this.setState({searchField: event.target.value});\r\n    }*/\r\n\r\n    render(){\r\n        //const {robots, searchField} = this.state;\r\n        //const {robots} = this.state;\r\n        const { searchField, onSearchChange,robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\r\n        })\r\n\r\n        return isPending ?\r\n             <h1 className='tc'>Loading...</h1> :\r\n             (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>DIT TEAM</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text)=>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots =() => (distpatch) => {\r\n    distpatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://raw.githubusercontent.com/marmola90/JsonDBDemo/master/users')\r\n        .then(response => response.json())\r\n        .then(data => distpatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n        .catch(error=> distpatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch= {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return  Object.assign({},state,{ searchField: action.payload});    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots={\r\n    isPending:false,\r\n    robots:[],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots=(state=initialStateRobots,action={}) =>{\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots:action.payload, isPending:false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware,combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots,requestRobots } from './reducers';\nimport 'tachyons';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = \n    createStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App /> \n    </Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}